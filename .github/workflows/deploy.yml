name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # âœ… Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # âœ… Login to AWS ECR
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # âœ… Build Docker image
      - name: Build Docker image
        run: docker build -t fastapi-app .

      # âœ… Tag and push image to AWS ECR
      - name: Push Docker image to AWS ECR
        run: |
          docker tag fastapi-app ${{ secrets.ECR_REGISTRY }}/fastapi-app:latest
          docker push ${{ secrets.ECR_REGISTRY }}/fastapi-app:latest

      # âœ… Deploy to AWS EC2 - Step 1: Pull latest code & prepare for reboot
      - name: Deploy to EC2 - Part 1 (Git Pull & Prepare)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /home/ubuntu/fastapi-book-project || exit

            # Pull latest code from GitHub
            git reset --hard
            git pull origin main

            # Login to AWS ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            # Restart Docker service (optional step before reboot)
            sudo systemctl restart docker

      # âœ… Reboot EC2 (Separate Step)
      - name: Reboot EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Rebooting EC2 instance now..."
            sudo nohup reboot &  # Run reboot in background to prevent SSH disconnect failure

      # âœ… Wait for EC2 to Restart Before Reconnecting
      - name: Wait for EC2 to Restart
        run: |
          echo "Waiting for EC2 to restart..."
          sleep 90  # Wait for 90 seconds (increase if needed)
          while ! nc -z ${{ secrets.EC2_PUBLIC_IP }} 22; do
            echo "EC2 still rebooting... waiting 10 more seconds"
            sleep 10
          done
          echo "EC2 is back online!"

      # âœ… Deploy to AWS EC2 - Step 2: Restart FastAPI App
      - name: Deploy to EC2 - Part 2 (Restart FastAPI)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Wait for EC2 services to start
            sleep 10

            # Login to AWS ECR again after reboot
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            # Pull the latest image
            sudo docker pull ${{ secrets.ECR_REGISTRY }}/fastapi-app:latest

            # # Stop and remove any old containers
            # sudo docker ps -q --filter "name=fastapi-app" | xargs -r sudo docker stop
            # sudo docker ps -aq --filter "name=fastapi-app" | xargs -r sudo docker rm -f

            # Stop and remove the old container (forcefully)
            echo "Stopping old container..."
            sudo docker stop fastapi-app || true
            echo "Removing old container..."
            sudo docker rm -f fastapi-app || true
            
            # Clean up old Docker images
            sudo docker system prune -f

            # Check if port 8000 is in use and free it
            if lsof -i :8000; then
              echo "Port 8000 is in use. Stopping the process..."
              fuser -k 8000/tcp  # Kill any process using port 8000
            fi

            # Run the new container
            sudo docker run -d --restart=always -p 8000:8000 --name fastapi-app ${{ secrets.ECR_REGISTRY }}/fastapi-app:latest

            # Reload systemd daemon to prevent Nginx warning
            sudo systemctl daemon-reload

            # Restart Nginx
            sudo systemctl restart nginx

            echo "Deployment Successful Tolu! ðŸš€"
